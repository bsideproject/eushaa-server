type Query {
	user(id: Int!): User
	userByEmail(email: String!): User

	login(email: String!, password: String!): String
	isLogin(authorization: String!): String

	todoLists(userId: Int!, start: String, count: Int): [TodoList]
	todoList(userId: Int!, title: String!): TodoList
	todoItems(todoId: Int!): [TodoItem]

	getSpaceItemsByLevel(levelId: Int!): [SpaceItems!]!

	level(levelNumber: Int!): Levels

	team(id: Int!): Team
	members(team_id: Int!): [User!]!
	teamByUser(user_id: Int!): Team
}
type Mutation {
	signup(email: String!, name: String!, password: String): User
	updateUser(id: Int!, name: String, team_id: Int, type: String): Int!
	matchTeam(userId: Int!, type: String!): User
	deleteUser(id: Int!): Int

	addTodoItem(todoListId: Int!, content: String): TodoItem!
	updateTodoItem(id: Int!, content: String, isComplete: Status): TodoItem
	deleteTodoItem(id: Int!): Int!

	setTodoItems(todoListId: Int!, addContents: [String], removeIdList: [Int]): Int!

	makeTodoList(userId: Int!, title: String): TodoList!
	updateTodoList(id: Int!, title: String, isComplete: Status): Int!
	deleteTodoList(id: Int!): Int!

	addSpaceItemLog(teamId: Int!, userId: Int!, itemId: Int!): SpaceItemLog
	addCharacterItem(userId: Int!, itemId: Int!): CharacterItemLog

	updateCharacterItemStatus(userId: Int!, itemId: Int!, isActive: Status!): Int

	makeTeam(type: String!): Team!
	participateTeam(user_id: Int!, team_id: Int!): Int!
	updateTeam(id: Int!, level: Int, gauge: Int): Int!
	increaseValues(id: Int!, keys: [String!]!): Team
	deleteTeam(id: Int!): Int!
}
type User {
	id: String!
	email: String!
	name: String!
	password: String
	todoList: [TodoList]
	team: Team
	userType: UserType
	character: Character
	characterLogs(count: Int): [Character]
}
type Character {
	id: String!
	image: String!
	characterItems: [CharacterItem]
}
type CharacterItem {
	id: String!
	name: String!
	image: String!
	is_active: Status!
	pos_x: Float!
	pos_y: Float!
}
type TodoList {
	id: String!
	user_id: String!
	user: User
	title: String
	todoItems: [TodoItem]
	is_complete: Status
	completed_at: Date
}
type TodoItem {
	id: String!
	todo_id: String!
	content: String
	updated_at: Date
	is_complete: Status
	completed_at: Date
}

type Team {
	id: String!
	level: Int
	gauge: Gauge
	created_at: Date
	members: [User]
	teamType: TeamType
	spaces: [Space]
}

type Gauge {
	id: Int
	guage: Int!
	level: Int
	image: String!
}

type Levels {
	id: String!
	level: Int!
	bg_img: String
	SpaceItems: [SpaceItems]
}

type SpaceItems {
	id: String!
	name: String!
	level_id: String!
	pos_x: Float
	pos_y: Float
	deactivate_image: String
	activate_image: String
}

type SpaceItemLog {
	id: String!
	team_id: String!
	item_id: String!
	user_id: String!
	created_at: Date
}

type CharacterItemLog {
	id: String!
	user_id: String!
	item_id: String!
	is_active: Status
	created_at: Date
}

type UserType {
	id: String!
	type: String!
	description: String
}

type TeamType {
	id: String!
	type: String!
	description: String
}

type Space {
	id: Int!
	level: Int
	bg_img: String
	gauge_img: String
	SpaceItems: [SpaceItem]
}

type SpaceItem {
	id: String!
	level_id: String!
	pos_x: Float
	pos_y: Float
	image: String
	user: User
}
scalar Date

enum Status {
	Y
	N
}
